# Load functions
source("tfs_cascade_funcs.R")
# Load cereals network data for 2011
data_dir <- "/Users/puma/Dropbox/FoodCascadeModel/data/fao_networks"
clear
clean
prod_trade_file <- file.path(data_dir, "1 - CEREALS AND CEREAL PRODUCTS.RData")
source('~/Dropbox/FoodCascadeModel/cereals-network-shocks/volcanic_shock.R', echo=TRUE)
source('~/Dropbox/FoodCascadeModel/cereals-network-shocks/volcanic_shock.R', echo=TRUE)
pwd
source('~/Dropbox/FoodCascadeModel/cereals-network-shocks/volcanic_shock.R', echo=TRUE)
ls
ls
exit
close()
library(shiny); runApp('Dropbox/Kummu/Matias/historical_food_production.R')
# where   c_init = name of the initial country that is impacted
#         a_init = fraction of production lost initially by country c_init
#             P0 = initial production vector
#             R0 = initial reserve vector; note: 0.5*R0 effectively means 50% of reserves can be tapped to absorb shock
#             E0 = initial trade matrix
#OPTIONAL: cfrac = fraction of shock absorbed by C before changing trade (i.e. how much consumption would be reduced)
#           asym = TRUE => shocked countries can't increase their exports
#           kmax = max. number of iterations
#           amin = any shock below this value (as fraction of net supply) is negligible
# R Libraries
library(dplyr)
# where   c_init = name of the initial country that is impacted
#         a_init = fraction of production lost initially by country c_init
#             P0 = initial production vector
#             R0 = initial reserve vector; note: 0.5*R0 effectively means 50% of reserves can be tapped to absorb shock
#             E0 = initial trade matrix
#OPTIONAL: cfrac = fraction of shock absorbed by C before changing trade (i.e. how much consumption would be reduced)
#           asym = TRUE => shocked countries can't increase their exports
#           kmax = max. number of iterations
#           amin = any shock below this value (as fraction of net supply) is negligible
# R Libraries
library(stats)
# where   c_init = name of the initial country that is impacted
#         a_init = fraction of production lost initially by country c_init
#             P0 = initial production vector
#             R0 = initial reserve vector; note: 0.5*R0 effectively means 50% of reserves can be tapped to absorb shock
#             E0 = initial trade matrix
#OPTIONAL: cfrac = fraction of shock absorbed by C before changing trade (i.e. how much consumption would be reduced)
#           asym = TRUE => shocked countries can't increase their exports
#           kmax = max. number of iterations
#           amin = any shock below this value (as fraction of net supply) is negligible
# R Libraries
library(stats)
source('~/Dropbox/PumaModels/FSC-Model/main/Run_DustBowl.R', echo=TRUE)
install.packages(R.matlab)
install.packages(matlab)
install.packages("R.matlab")
source('~/Dropbox/PumaModels/FSC-Model/main/Run_DustBowl.R', echo=TRUE)
source('~/Dropbox/PumaModels/FSC-Model/main/Run_DustBowl.R', echo=TRUE)
source('~/Dropbox/PumaModels/FSC-Model/main/Run_DustBowl.R', echo=TRUE)
source('~/Dropbox/PumaModels/FSC-Model/main/Run_DustBowl.R', echo=TRUE)
install.packages("igraph")
source('~/Dropbox/PumaModels/FSC-Model/main/Run_DustBowl.R', echo=TRUE)
sudo apt-get install libxml2-dev
apt-get install libxml2-dev
install.packages("libxml2-dev")
source('~/Dropbox/PumaModels/FSC-Model/main/Run_DustBowl.R', echo=TRUE)
exit
close()
